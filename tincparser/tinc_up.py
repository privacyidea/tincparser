APPLIANCE_SECTION_START = '# BEGIN AUTOGENERATED'
APPLIANCE_SECTION_END = '# END AUTOGENERATED'

class UpScript(object):
    """
    Parser and generator for tinc-up scripts.

    This is pretty basic:
    It assumes that somewhere in the script, there is a section initiated by '# BEGIN AUTOGENERATED'
    and concluded by '# END AUTOGENERATED'. Everything before this section is the "prolog", everything
    below this section is the "epilog". Both prolog and epilog can be freely modified by
    the user.
    Upon saving, this ensures that the prolog begins with a shebang.
    """
    def __init__(self, io, filename):
        self.io = io
        self.filename = filename
        self._clear()
        self._open()

    def _clear(self):
        self.prolog = []
        self.appliance_section = []
        self.epilog = []

    def _open(self):
        self._clear()
        if self.io.exists(self.filename):
            with self.io.open(self.filename, 'r') as f:
                # read:
                # lines up to "# BEGIN AUTOGENERATED" into self.prolog
                # everything up to "# END AUTOGENERATED" into self.appliance_section
                # everything after it into self.epilog
                current_part = self.prolog
                for line in f.readlines():
                    line = line.strip()
                    if line == APPLIANCE_SECTION_START:
                        current_part = self.appliance_section
                    elif current_part is self.appliance_section and line == APPLIANCE_SECTION_END:
                        current_part = self.epilog
                    else:
                        current_part.append(line)

    def _generate(self):
        return '\n'.join(
            self.prolog + [APPLIANCE_SECTION_START] + self.appliance_section + [APPLIANCE_SECTION_END] + self.epilog
        )

    def save(self):
        # ensure that we have a shebang
        if not self.prolog or not self.prolog[0].startswith('#!'):
            self.prolog.insert(0, '#!/bin/sh')
        with self.io.open(self.filename, 'w') as f:
            f.write(self._generate())
            f.write('\n')
